// GEP_MASTER_V1.0.csvÎ•º JSONÏúºÎ°ú Î≥ÄÌôòÌïòÎäî ÏΩîÎìú
import Papa from 'papaparse';

async function convertCSVToJSON() {
    try {
        console.log("=== GEP CSV ‚Üí JSON Î≥ÄÌôò ÏãúÏûë ===");
        
        // CSV ÌååÏùº ÏùΩÍ∏∞
        const csvData = await window.fs.readFile('GEP_MASTER_V1.0.csv', { encoding: 'utf8' });
        console.log(`CSV ÌååÏùº ÏùΩÍ∏∞ ÏôÑÎ£å: ${csvData.length} characters`);
        
        // CSV ÌååÏã± (Í∞ïÎ†•Ìïú ÌååÏã± ÏòµÏÖò ÏÇ¨Ïö©)
        const parseResult = Papa.parse(csvData, {
            header: true,                    // Ï≤´ Î≤àÏß∏ ÌñâÏùÑ Ìó§ÎçîÎ°ú ÏÇ¨Ïö©
            dynamicTyping: true,            // ÏûêÎèô ÌÉÄÏûÖ Î≥ÄÌôò
            skipEmptyLines: true,           // Îπà Ï§Ñ Í±¥ÎÑàÎõ∞Í∏∞
            delimitersToGuess: [',', '\t', '|', ';']  // Íµ¨Î∂ÑÏûê ÏûêÎèô Í∞êÏßÄ
        });
        
        if (parseResult.errors.length > 0) {
            console.warn("CSV ÌååÏã± Í≤ΩÍ≥†:", parseResult.errors);
        }
        
        console.log(`CSV ÌååÏã± ÏôÑÎ£å: ${parseResult.data.length}Ìñâ`);
        console.log("Ìó§Îçî ÌïÑÎìú:", parseResult.meta.fields);
        
        // GEP JSON ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
        const gepQuestionsData = {};
        let processedCount = 0;
        let skippedCount = 0;
        let duplicateCount = 0;
        
        parseResult.data.forEach((row, index) => {
            // ÌïÑÏàò ÌïÑÎìú ÌôïÏù∏
            if (row.INDEX && row.QCODE) {
                const qcode = row.QCODE.toString().trim();
                
                // Ï§ëÎ≥µ QCODE Ï≤¥ÌÅ¨
                if (gepQuestionsData[qcode]) {
                    duplicateCount++;
                    console.log(`Ï§ëÎ≥µ QCODE Î∞úÍ≤¨: ${qcode} (Ìñâ ${index + 2})`);
                    return; // Ï§ëÎ≥µÏù¥Î©¥ Ï≤´ Î≤àÏß∏ Í≤ÉÎßå Ïú†ÏßÄ
                }
                
                // GEP ÌòïÏãùÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞Ìôî
                gepQuestionsData[qcode] = {
                    "etitle": (row.ETITLE || "").toString().trim(),
                    "eclass": (row.ECLASS || "").toString().trim(),
                    "eround": row.EROUND ? row.EROUND.toString() : "",
                    "layer1": (row.LAYER1 || "").toString().trim(),
                    "layer2": (row.LAYER2 || "").toString().trim(),
                    "layer3": row.LAYER3 ? row.LAYER3.toString() : "",
                    "qnum": row.QNUM ? row.QNUM.toString() : "",
                    "qtype": (row.QTYPE || "").toString().trim(),
                    "question": row.QUESTION || "",  // QUESTION ÌïÑÎìú ÎÖ∏ÌÑ∞Ïπò
                    "answer": (row.ANSWER || "").toString().trim(),
                    "difficulty": row.DIFFICULTY ? row.DIFFICULTY.toString() : "",
                    "created_date": (row.CREATED_DATE || "").toString().trim(),
                    "modified_date": (row.MODIFIED_DATE || "").toString().trim()
                };
                
                processedCount++;
            } else {
                skippedCount++;
                if (index < 10) { // Ï≤òÏùå 10Í∞úÎßå Î°úÍ∑∏
                    console.log(`ÌïÑÏàò ÌïÑÎìú ÎàÑÎùΩ (Ìñâ ${index + 2}): INDEX=${row.INDEX}, QCODE=${row.QCODE}`);
                }
            }
        });
        
        console.log("=== Î≥ÄÌôò ÌÜµÍ≥Ñ ===");
        console.log(`Ï†ÑÏ≤¥ CSV ÌñâÏàò: ${parseResult.data.length}`);
        console.log(`Ï≤òÎ¶¨Îêú Î¨∏Ï†ú Ïàò: ${processedCount}`);
        console.log(`Ïä§ÌÇµÎêú Ìñâ Ïàò: ${skippedCount}`);
        console.log(`Ï§ëÎ≥µ Ï†úÍ±∞Îêú Ïàò: ${duplicateCount}`);
        console.log(`ÏµúÏ¢Ö Í≥†Ïú† Î¨∏Ï†ú Ïàò: ${Object.keys(gepQuestionsData).length}`);
        
        // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
        console.log("\n=== Î≥ÄÌôòÎêú Îç∞Ïù¥ÌÑ∞ ÏÉòÌîå (Ï≤´ 3Í∞ú) ===");
        let sampleCount = 0;
        for (const [qcode, question] of Object.entries(gepQuestionsData)) {
            if (sampleCount < 3) {
                console.log(`\n${sampleCount + 1}. QCODE: ${qcode}`);
                console.log(`   ETITLE: ${question.etitle}`);
                console.log(`   ECLASS: ${question.eclass}`);
                console.log(`   EROUND: ${question.eround}`);
                console.log(`   LAYER1: ${question.layer1}`);
                console.log(`   QTYPE: ${question.qtype}`);
                console.log(`   QUESTION: ${question.question ? question.question.substring(0, 80) + '...' : 'N/A'}`);
                console.log(`   ANSWER: ${question.answer}`);
                sampleCount++;
            }
        }
        
        // JSON Î¨∏ÏûêÏó¥ ÏÉùÏÑ± (2Ïπ∏ Îì§Ïó¨Ïì∞Í∏∞)
        const jsonString = JSON.stringify(gepQuestionsData, null, 2);
        
        // ÌååÏùº ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
        const fileSizeBytes = new Blob([jsonString]).size;
        const fileSizeKB = (fileSizeBytes / 1024).toFixed(1);
        const fileSizeMB = (fileSizeBytes / (1024 * 1024)).toFixed(2);
        
        console.log(`\n=== ÏµúÏ¢Ö JSON ÌååÏùº Ï†ïÎ≥¥ ===`);
        console.log(`ÌååÏùº ÌÅ¨Í∏∞: ${fileSizeBytes} bytes (${fileSizeKB} KB / ${fileSizeMB} MB)`);
        console.log(`Ï¥ù Î¨∏Ï†ú Ïàò: ${Object.keys(gepQuestionsData).length}`);
        
        // Ï†ÑÏó≠ Î≥ÄÏàòÏóê Ï†ÄÏû•ÌïòÏó¨ Îã§Ïö¥Î°úÎìú Í∞ÄÎä•ÌïòÍ≤å Ìï®
        globalThis.gepQuestionsJSON = jsonString;
        globalThis.gepQuestionsData = gepQuestionsData;
        
        console.log("\n‚úÖ CSV ‚Üí JSON Î≥ÄÌôò ÏôÑÎ£å!");
        console.log("Î≥ÄÌôòÎêú JSONÏùÄ globalThis.gepQuestionsJSONÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.");
        
        return {
            success: true,
            totalQuestions: Object.keys(gepQuestionsData).length,
            fileSizeBytes: fileSizeBytes,
            data: gepQuestionsData,
            jsonString: jsonString
        };
        
    } catch (error) {
        console.error("‚ùå Î≥ÄÌôò Ïò§Î•ò:", error);
        console.error("Ïò§Î•ò Ïä§ÌÉù:", error.stack);
        return {
            success: false,
            error: error.message
        };
    }
}

// Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Ìï®Ïàò
function validateGEPData(data) {
    console.log("\n=== Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù ÏãúÏûë ===");
    
    let validationResults = {
        totalQuestions: Object.keys(data).length,
        missingQuestions: 0,
        missingAnswers: 0,
        invalidQCodes: 0,
        uniqueRounds: new Set(),
        uniqueLayers: new Set(),
        questionTypes: {},
    };
    
    for (const [qcode, question] of Object.entries(data)) {
        // QCODE ÌòïÏãù Í≤ÄÏ¶ù
        if (!qcode.match(/^[A-Z]{4}-\d{2}$/)) {
            validationResults.invalidQCodes++;
        }
        
        // ÌïÑÏàò ÌïÑÎìú Í≤ÄÏ¶ù
        if (!question.question || question.question.trim() === '') {
            validationResults.missingQuestions++;
        }
        
        if (!question.answer || question.answer.trim() === '') {
            validationResults.missingAnswers++;
        }
        
        // ÌÜµÍ≥Ñ ÏàòÏßë
        if (question.eround) validationResults.uniqueRounds.add(question.eround);
        if (question.layer1) validationResults.uniqueLayers.add(question.layer1);
        
        const qtype = question.qtype || 'Unknown';
        validationResults.questionTypes[qtype] = (validationResults.questionTypes[qtype] || 0) + 1;
    }
    
    console.log("Í≤ÄÏ¶ù Í≤∞Í≥º:");
    console.log(`Ï¥ù Î¨∏Ï†ú Ïàò: ${validationResults.totalQuestions}`);
    console.log(`Î¨∏Ï†ú ÎÇ¥Ïö© ÎàÑÎùΩ: ${validationResults.missingQuestions}`);
    console.log(`ÎãµÏïà ÎàÑÎùΩ: ${validationResults.missingAnswers}`);
    console.log(`ÏûòÎ™ªÎêú QCODE ÌòïÏãù: ${validationResults.invalidQCodes}`);
    console.log(`ÌöåÏ∞® Ïàò: ${validationResults.uniqueRounds.size}Í∞ú (${Array.from(validationResults.uniqueRounds).join(', ')})`);
    console.log(`Í≥ºÎ™© Ïàò: ${validationResults.uniqueLayers.size}Í∞ú (${Array.from(validationResults.uniqueLayers).join(', ')})`);
    console.log(`Î¨∏Ï†ú Ïú†Ìòï:`, validationResults.questionTypes);
    
    return validationResults;
}

// Ïã§Ìñâ Ìï®Ïàò
async function main() {
    const result = await convertCSVToJSON();
    
    if (result.success) {
        validateGEPData(result.data);
        console.log("\nüéâ Î™®Îì† ÏûëÏóÖ ÏôÑÎ£å!");
    } else {
        console.log("‚ùå Î≥ÄÌôò Ïã§Ìå®:", result.error);
    }
    
    return result;
}

// Ïã§Ìñâ
main();